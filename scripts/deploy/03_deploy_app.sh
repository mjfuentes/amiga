#!/bin/bash
# Phase 3: Deploy AMIGA application
# Copies code, builds frontend, creates systemd service, obtains SSL cert

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Load configuration
source "$PROJECT_ROOT/.env.deploy"

# Load state
if [ ! -f "$SCRIPT_DIR/.state/droplet_ip" ]; then
    echo "❌ Droplet IP not found. Run 01_provision_server.sh first"
    exit 1
fi

DROPLET_IP=$(cat "$SCRIPT_DIR/.state/droplet_ip")
SSH_KEY_PATH=$(cat "$SCRIPT_DIR/.state/ssh_key_path")
REMOTE_USER="${REMOTE_USER:-amiga}"
INSTALL_PATH="${INSTALL_PATH:-/opt/amiga}"

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🚀 Phase 3: Application Deployment"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "   IP:     $DROPLET_IP"
echo "   Domain: $DOMAIN_NAME"
echo "   Path:   $INSTALL_PATH"
echo ""

# Step 1: Build frontend locally
echo "📦 Building frontend locally..."
cd "$PROJECT_ROOT/monitoring/dashboard/chat-frontend"

if [ ! -d "node_modules" ]; then
    echo "   Installing npm dependencies..."
    npm install
fi

echo "   Running build..."
npm run build

cd "$PROJECT_ROOT"
echo "✅ Frontend built"

# Step 2: Create remote .env file
echo ""
echo "📝 Creating remote .env file..."
cat > /tmp/amiga_remote.env << ENV_FILE
# AMIGA Production Configuration
# Auto-generated by deployment script

# Anthropic API
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
ANTHROPIC_ADMIN_API_KEY=${ANTHROPIC_ADMIN_API_KEY:-}

# Workspace
WORKSPACE_PATH=${INSTALL_PATH}

# Cost Limits
DAILY_COST_LIMIT=${DAILY_COST_LIMIT:-100}
MONTHLY_COST_LIMIT=${MONTHLY_COST_LIMIT:-1000}

# Session
SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-60}

# Logging
LOG_LEVEL=${LOG_LEVEL:-INFO}

# Monitoring
MONITORING_AUTO_RESTART=false
MONITORING_DEBUG=false

# Claude Code
CLAUDE_CLI_PATH=claude
ENV_FILE

# Step 3: Sync code to server
echo ""
echo "📤 Syncing code to server..."
rsync -avz --delete \
    --exclude 'venv/' \
    --exclude 'node_modules/' \
    --exclude 'monitoring/dashboard/chat-frontend/node_modules/' \
    --exclude 'monitoring/dashboard/chat-frontend/build/' \
    --exclude 'data/' \
    --exclude 'logs/' \
    --exclude '*.pyc' \
    --exclude '__pycache__/' \
    --exclude '.git/' \
    --exclude '.env' \
    --exclude '.env.deploy' \
    --exclude 'scripts/deploy/.state/' \
    -e "ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no" \
    "$PROJECT_ROOT/" \
    "$REMOTE_USER@$DROPLET_IP:$INSTALL_PATH/"

echo "✅ Code synced"

# Step 4: Upload .env
echo ""
echo "📤 Uploading .env configuration..."
scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no \
    /tmp/amiga_remote.env "$REMOTE_USER@$DROPLET_IP:$INSTALL_PATH/.env"
rm /tmp/amiga_remote.env

# Step 5: Setup application on server
echo ""
echo "⚙️  Setting up application on server..."

ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" << 'REMOTE_SETUP'
set -e

cd /opt/amiga

echo "📦 Creating virtual environment..."
python3.10 -m venv venv
source venv/bin/activate

echo "📦 Installing Python dependencies..."
pip install --upgrade pip > /dev/null
pip install -r requirements.txt > /dev/null

echo "📁 Creating directories..."
mkdir -p data logs static/chat backups

echo "✅ Application setup complete"
REMOTE_SETUP

echo "✅ Application configured"

# Step 6: Deploy frontend build
echo ""
echo "📤 Deploying frontend build..."
rsync -avz --delete \
    -e "ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no" \
    "$PROJECT_ROOT/monitoring/dashboard/chat-frontend/build/" \
    "$REMOTE_USER@$DROPLET_IP:$INSTALL_PATH/static/chat/"

echo "✅ Frontend deployed"

# Step 7: Create systemd service
echo ""
echo "⚙️  Creating systemd service..."

cat > /tmp/amiga.service << 'SERVICE_FILE'
[Unit]
Description=AMIGA Monitoring Server
After=network.target

[Service]
Type=simple
User=amiga
WorkingDirectory=/opt/amiga
Environment="PYTHONPATH=/opt/amiga"
ExecStart=/opt/amiga/venv/bin/python monitoring/server.py
Restart=always
RestartSec=5
StandardOutput=append:/opt/amiga/logs/monitoring.log
StandardError=append:/opt/amiga/logs/monitoring.log

# Security hardening
PrivateTmp=true
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/amiga/data /opt/amiga/logs /opt/amiga/static

[Install]
WantedBy=multi-user.target
SERVICE_FILE

scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no \
    /tmp/amiga.service "$REMOTE_USER@$DROPLET_IP:/tmp/"

ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" \
    "sudo mv /tmp/amiga.service /etc/systemd/system/ && \
     sudo systemctl daemon-reload && \
     sudo systemctl enable amiga && \
     sudo systemctl start amiga"

rm /tmp/amiga.service

echo "✅ Systemd service created and started"

# Step 8: Wait for service to be healthy
echo ""
echo "🔍 Waiting for service to be healthy..."
MAX_WAIT=30
WAITED=0

while [ $WAITED -lt $MAX_WAIT ]; do
    if ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" \
        "curl -s http://localhost:3000/health" > /dev/null 2>&1; then
        echo "✅ Service is healthy"
        break
    fi

    if [ $WAITED -eq $MAX_WAIT ]; then
        echo "❌ Service failed to become healthy"
        echo "📋 Checking logs..."
        ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" \
            "tail -50 /opt/amiga/logs/monitoring.log"
        exit 1
    fi

    sleep 2
    WAITED=$((WAITED + 2))
    echo "   Waiting... (${WAITED}s)"
done

# Step 9: Obtain SSL certificate
echo ""
echo "🔒 Obtaining SSL certificate..."

# Check if DNS has propagated
echo "🔍 Checking DNS propagation..."
MAX_DNS_WAIT=300  # 5 minutes
DNS_WAITED=0

while [ $DNS_WAITED -lt $MAX_DNS_WAIT ]; do
    RESOLVED_IP=$(dig +short "$DOMAIN_NAME" @8.8.8.8 | tail -1)

    if [ "$RESOLVED_IP" = "$DROPLET_IP" ]; then
        echo "✅ DNS propagated: $DOMAIN_NAME → $DROPLET_IP"
        break
    fi

    if [ $DNS_WAITED -ge $MAX_DNS_WAIT ]; then
        echo "⚠️  DNS not fully propagated yet"
        echo "   Expected: $DROPLET_IP"
        echo "   Got:      $RESOLVED_IP"
        echo ""
        echo "📝 Manual SSL setup required:"
        echo "   ssh -i $SSH_KEY_PATH $REMOTE_USER@$DROPLET_IP"
        echo "   sudo certbot --nginx -d $DOMAIN_NAME"
        exit 0
    fi

    sleep 10
    DNS_WAITED=$((DNS_WAITED + 10))
    echo "   Waiting for DNS... (${DNS_WAITED}s) Current: $RESOLVED_IP"
done

# Obtain certificate
echo "📝 Running certbot..."
ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" << CERTBOT_CMD
    sudo certbot --nginx \
        -d $DOMAIN_NAME \
        --non-interactive \
        --agree-tos \
        --email admin@$DOMAIN_NAME \
        --redirect
CERTBOT_CMD

echo "✅ SSL certificate obtained"

# Step 10: Setup backup cron job
echo ""
echo "💾 Setting up automated backups..."

cat > /tmp/backup_amiga.sh << 'BACKUP_SCRIPT'
#!/bin/bash
# AMIGA Database Backup Script

BACKUP_DIR="/opt/amiga/backups"
DB_PATH="/opt/amiga/data/agentlab.db"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=30

# Create backup
mkdir -p "$BACKUP_DIR"
sqlite3 "$DB_PATH" ".backup $BACKUP_DIR/db_$DATE.db"

# Compress
gzip "$BACKUP_DIR/db_$DATE.db"

# Delete old backups
find "$BACKUP_DIR" -name "db_*.db.gz" -mtime +$RETENTION_DAYS -delete

echo "$(date): Backup created: db_$DATE.db.gz" >> /opt/amiga/logs/backup.log
BACKUP_SCRIPT

scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no \
    /tmp/backup_amiga.sh "$REMOTE_USER@$DROPLET_IP:/tmp/"

ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" << 'CRON_SETUP'
    sudo mv /tmp/backup_amiga.sh /opt/amiga/scripts/backup_amiga.sh
    sudo chown amiga:amiga /opt/amiga/scripts/backup_amiga.sh
    sudo chmod +x /opt/amiga/scripts/backup_amiga.sh

    # Add cron job (daily at 2 AM)
    (crontab -l 2>/dev/null | grep -v backup_amiga.sh; \
     echo "0 2 * * * /opt/amiga/scripts/backup_amiga.sh") | crontab -
CRON_SETUP

rm /tmp/backup_amiga.sh

echo "✅ Backup cron job configured"

# Step 11: Final verification
echo ""
echo "🔍 Running final verification..."

# Check service status
SERVICE_STATUS=$(ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$REMOTE_USER@$DROPLET_IP" \
    "systemctl is-active amiga" || echo "inactive")

if [ "$SERVICE_STATUS" != "active" ]; then
    echo "❌ Service is not active: $SERVICE_STATUS"
    exit 1
fi

# Check HTTP endpoint
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://$DOMAIN_NAME/health" || echo "000")
if [ "$HTTP_CODE" != "200" ]; then
    echo "⚠️  HTTP health check returned: $HTTP_CODE (expected 200)"
fi

# Check HTTPS endpoint (if SSL was successful)
HTTPS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN_NAME/health" 2>/dev/null || echo "000")
if [ "$HTTPS_CODE" = "200" ]; then
    echo "✅ HTTPS endpoint verified"
elif [ "$HTTPS_CODE" = "000" ]; then
    echo "⚠️  HTTPS not yet available (SSL may still be propagating)"
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✨ Phase 3 Complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "🌐 Access Points:"
echo "   HTTP:  http://$DOMAIN_NAME"
if [ "$HTTPS_CODE" = "200" ]; then
    echo "   HTTPS: https://$DOMAIN_NAME"
fi
echo ""
echo "🔐 SSH Access:"
echo "   ssh -i $SSH_KEY_PATH $REMOTE_USER@$DROPLET_IP"
echo ""
echo "📊 Service Management:"
echo "   Status:  sudo systemctl status amiga"
echo "   Logs:    tail -f /opt/amiga/logs/monitoring.log"
echo "   Restart: sudo systemctl restart amiga"
echo ""
echo "💾 Database:"
echo "   Path:    /opt/amiga/data/agentlab.db"
echo "   Backups: /opt/amiga/backups/ (daily at 2 AM)"
echo ""
echo "📝 Next Steps:"
echo "   1. Visit: https://$DOMAIN_NAME"
echo "   2. Register first user via /api/auth/register"
echo "   3. Configure monitoring alerts"
echo ""
