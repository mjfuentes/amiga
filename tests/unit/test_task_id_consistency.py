"""
Test that task_id is consistently passed through environment variables.

This test validates that:
1. task_id generated by TaskManager is passed to ClaudeInteractiveSession
2. TASK_ID environment variable is set when starting Claude session
3. git-worktree agent can access TASK_ID for consistent worktree naming
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

import re


def test_task_id_environment_variable_set():
    """Test that TASK_ID environment variable is set in ClaudeInteractiveSession.start()"""
    # Read the source file and verify the code sets TASK_ID
    code_cli_path = Path(__file__).parent.parent / "claude/code_cli.py"
    code_cli_content = code_cli_path.read_text()

    # Verify TASK_ID is set in environment
    assert 'env["TASK_ID"]' in code_cli_content, "TASK_ID should be set in environment dictionary"

    # Verify it's set to task_id parameter
    assert (
        'env["TASK_ID"] = task_id' in code_cli_content
    ), "TASK_ID should be set to task_id parameter"

    # Verify there's a comment explaining why
    assert (
        "consistent task numbering" in code_cli_content.lower()
        or "worktree naming consistency" in code_cli_content.lower()
    ), "Code should document why TASK_ID is set"


def test_task_id_in_workflow_prompt():
    """Test that workflows can reference $TASK_ID in prompts"""
    # Read code-task workflow
    workflow_path = Path(__file__).parent.parent / ".claude/commands/workflows/code-task.md"
    workflow_content = workflow_path.read_text()

    # Verify workflow references $TASK_ID
    assert (
        "create-worktree for task $TASK_ID" in workflow_content
    ), "Workflow should reference $TASK_ID in git-worktree invocation"

    # Verify documentation about TASK_ID
    assert (
        "$TASK_ID environment variable" in workflow_content or "TASK_ID" in workflow_content
    ), "Workflow should document TASK_ID usage"


def test_git_worktree_agent_task_id_priority():
    """Test that git-worktree agent prioritizes TASK_ID over SESSION_ID"""
    agent_path = Path(__file__).parent.parent / ".claude/agents/git-worktree.md"
    agent_content = agent_path.read_text()

    # Verify TASK_ID is listed as priority 1
    assert "$TASK_ID" in agent_content, "Agent should reference $TASK_ID"
    assert "Variable: `$TASK_ID`" in agent_content, "Agent should document TASK_ID variable"

    # Find priority sections
    priority_1_match = re.search(r"\*\*1\.\s+Environment Variable.*?\$TASK_ID", agent_content, re.DOTALL)
    priority_3_match = re.search(r"\*\*3\.\s+SESSION_ID", agent_content, re.DOTALL)

    assert priority_1_match is not None, "TASK_ID should be documented as priority 1"
    assert priority_3_match is not None, "SESSION_ID should be documented (as fallback)"

    # Verify TASK_ID appears before SESSION_ID in the content
    task_id_pos = agent_content.find("**1. Environment Variable")
    session_id_pos = agent_content.find("**3. SESSION_ID")

    assert task_id_pos < session_id_pos, "TASK_ID (priority 1) should appear before SESSION_ID (priority 3)"


def test_task_id_format_consistency():
    """Test that task_id format is consistent between TaskManager and usage"""
    from tasks.manager import TaskManager

    # Simulate task_id generation (without database)
    import uuid

    task_id = str(uuid.uuid4())[:6]

    # Verify format: 6-character alphanumeric
    assert len(task_id) == 6, "task_id should be 6 characters"
    assert task_id.replace("-", "").isalnum(), "task_id should be alphanumeric"


if __name__ == "__main__":
    print("Running task_id consistency tests...")

    try:
        test_task_id_environment_variable_set()
        print("✓ test_task_id_environment_variable_set passed")
    except AssertionError as e:
        print(f"✗ test_task_id_environment_variable_set failed: {e}")

    try:
        test_task_id_in_workflow_prompt()
        print("✓ test_task_id_in_workflow_prompt passed")
    except AssertionError as e:
        print(f"✗ test_task_id_in_workflow_prompt failed: {e}")

    try:
        test_git_worktree_agent_task_id_priority()
        print("✓ test_git_worktree_agent_task_id_priority passed")
    except AssertionError as e:
        print(f"✗ test_git_worktree_agent_task_id_priority failed: {e}")

    try:
        test_task_id_format_consistency()
        print("✓ test_task_id_format_consistency passed")
    except AssertionError as e:
        print(f"✗ test_task_id_format_consistency failed: {e}")

    print("\nAll tests completed!")
